{
  "log 字符串": {
    "prefix": "cls",
    "body": [
      "console.log(`~ $1`)"
    ]
  },
  "log 变量": {
    "prefix": "clv",
    "body": [
      "console.log(`~ $1`, $1)"
    ]
  },
  "普通函数": {
    "prefix": "fun",
    "body": [
      "function ${1:name}(params) {",
      "  $0",
      "}"
    ]
  },
  "对象函数的简写": {
    "prefix": "of",
    "body": [
      "${1:name}(params) {",
      "  $0",
      "}"
    ]
  },
  "箭头函数": {
    "prefix": "af",
    "body": [
      "res => {",
      "  $0",
      "}"
    ]
  },
  "带名字的箭头函数": {
    "prefix": "afn",
    "body": [
      "const ${1:name} = () => {",
      "  $0",
      "}"
    ]
  },
  "for 循环": {
    "prefix": "for",
    "body": [
      "for (let i = 0; i < ${1:array}; i++) {",
      "  $0",
      "}"
    ]
  },
  "for-of 循环": {
    "prefix": "fof",
    "body": [
      "for (const item of ${1:object}) {",
      "  $0",
      "}"
    ]
  },
  "for-in 循环": {
    "prefix": "fin",
    "body": [
      "for (const item in ${1:object}) {",
      "  $0",
      "}"
    ]
  },
  "switch case 循环": {
    "prefix": "sc",
    "body": [
      "switch (${1:v}) {",
      "  case \"$2\":",
      "    ",
      "    break;",
      "  default:",
      "    ",
      "}"
    ]
  },
  "setInterval": {
    "prefix": "si",
    "body": [
      "setInterval(() => {",
      "  $0",
      "}, ${1:intervalInms})"
    ]
  },
  "setTimeout": {
    "prefix": "st",
    "body": [
      "setTimeout(() => {",
      "  $0",
      "}, ${1:delayInms})"
    ]
  },
  "promise": {
    "prefix": "promise",
    "body": [
      "new Promise(function (resolve, reject) {",
      "  resolve()",
      "})"
    ]
  },
  "promise [then catch finally]": {
    "prefix": "promiseTCF",
    "body": [
      "new Promise(function (resolve, reject) {",
      "  ",
      "  resolve();",
      "}).then(value => {",
      "  ",
      "}).catch(reason => {",
      "  ",
      "}).finally(() => {",
      "  ",
      "})"
    ]
  },
  "import": {
    "prefix": "imp",
    "body": [
      "import $2 from '$1'"
    ]
  },
  "import 解构": {
    "prefix": "imd",
    "body": [
      "import { $1 } from '$1'"
    ]
  },
  "import reactive": {
    "prefix": " iReactive",
    "body": [
      "reactive"
    ]
  },
  "import watch": {
    "prefix": " iWatch",
    "body": [
      "watch"
    ]
  },
  "import mixins": {
    "prefix": " iMixins",
    "body": [
      "mixins: [${1:name}],"
    ]
  },
  "import nextTick": {
    "prefix": " iNextTick",
    "body": [
      "nextTick"
    ]
  },
  "import defineComponent": {
    "prefix": " iDComponent",
    "body": [
      "defineComponent"
    ]
  },
  "import defineAsyncComponent": {
    "prefix": " iDAComponent",
    "body": [
      "defineAsyncComponent"
    ]
  },
  "import defineProps": {
    "prefix": " iProps",
    "body": [
      "defineProps"
    ]
  },
  "import defineEmits": {
    "prefix": " iEmits",
    "body": [
      "defineEmits"
    ]
  },
  "import useSlots": {
    "prefix": " iSlots",
    "body": [
      "useSlots"
    ]
  },
  "import useAttrs": {
    "prefix": " iAttrs",
    "body": [
      "useAttrs"
    ]
  },
  "import defineExpose": {
    "prefix": " iExpose",
    "body": [
      "defineExpose"
    ]
  },
  "import onBeforeMount": {
    "prefix": " iBMount",
    "body": [
      "onBeforeMount"
    ]
  },
  "import onMounted ": {
    "prefix": " iMounted",
    "body": [
      "onMounted"
    ]
  },
  "import onBeforeUpdate ": {
    "prefix": " iBUpdate",
    "body": [
      "onBeforeUpdate"
    ]
  },
  "import onUpdated ": {
    "prefix": " iUpdated",
    "body": [
      "onUpdated"
    ]
  },
  "import onBeforeUnmount ": {
    "prefix": " iBUnmount",
    "body": [
      "onBeforeUnmount"
    ]
  },
  "import onUnmounted": {
    "prefix": " iUnmounted",
    "body": [
      "onUnmounted"
    ]
  },
  "import useRouter": {
    "prefix": " iRouter",
    "body": [
      "onBeforeRouteLeave"
    ]
  },
  "import useRoute ": {
    "prefix": " iRoute",
    "body": [
      "onBeforeRouteLeave"
    ]
  },
  "import onBeforeRouteLeave": {
    "prefix": " iBRLeave",
    "body": [
      "onBeforeRouteLeave"
    ]
  },
  "import onBeforeRouteUpdate ": {
    "prefix": " iBRupdata",
    "body": [
      "onBeforeRouteUpdate"
    ]
  },
  "v2 data": {
    "prefix": "vData",
    "body": [
      "data() {",
      "  return {",
      "    $0",
      "  }",
      "},"
    ]
  },
  "v2 components": {
    "prefix": "vComponents",
    "body": [
      "components: {",
      "  $0",
      "},"
    ]
  },
  "v2 Props": {
    "prefix": "vProps",
    "body": [
      "props: {",
      "  ${1:propName}: {",
      "    type: String",
      "  }",
      "},"
    ]
  },
  "v2 [ default ]": {
    "prefix": "vPropsD",
    "body": [
      "props: {",
      "  ${1:name}: {",
      "    type: String,",
      "    default: \"\"",
      "  }",
      "},"
    ]
  },
  "v2 [ default required ]": {
    "prefix": "vPropsDR",
    "body": [
      "props: {",
      "  ${1:name}: {",
      "    type: String,",
      "    default: \"\",",
      "    required: true",
      "  }",
      "},"
    ]
  },
  "v2 emit": {
    "prefix": "vEmit",
    "body": [
      "this.\\$emit(\"${1:name}\")"
    ]
  },
  "v2 methods": {
    "prefix": "vMethods",
    "body": [
      "methods: {",
      "  ${1:name}() {",
      "    $0",
      "  }",
      "},"
    ]
  },
  "v2 computed": {
    "prefix": "vComputed",
    "body": [
      "computed: {",
      "  ${1:name}() {",
      "    return $0",
      "  }",
      "},"
    ]
  },
  "v2 computed [get set]": {
    "prefix": "vComputedGS",
    "body": [
      "computed: {",
      "  ${1:name}: {",
      "    get() {",
      "      ",
      "      return ",
      "    },",
      "    set(newValue) {",
      "      ",
      "    },",
      "  }",
      "},"
    ]
  },
  "v2 Watch": {
    "prefix": "vWatch",
    "body": [
      "watch: {",
      "  ${1:name}(newValue, oldValue) {",
      "    $0",
      "  }",
      "},"
    ]
  },
  "v2 [deep]": {
    "prefix": "vWatchD",
    "body": [
      "watch: {",
      "  ${1:name}: {",
      "    handler(newValue, oldValue) {",
      "      $0",
      "    },",
      "    deep:true,",
      "  }",
      "},"
    ]
  },
  "v2 [immediate]": {
    "prefix": "vWatchI",
    "body": [
      "watch: {",
      "  ${1:name}: {",
      "    handler(newValue, oldValue) {",
      "      $0",
      "    },",
      "    immediate:true,",
      "  }",
      "},"
    ]
  },
  "v2 [deep immediate]": {
    "prefix": "vWatchDI",
    "body": [
      "watch: {",
      "  ${1:name}: {",
      "    handler(newValue, oldValue) {",
      "      $0",
      "    },",
      "    deep:true,",
      "    immediate:true,",
      "  }",
      "},"
    ]
  },
  "v2 filters": {
    "prefix": "vFilters",
    "body": [
      "filters: {",
      "  ${1:name}(value) {",
      "    $0",
      "    return value",
      "  }",
      "},"
    ]
  },
  "v2 mixins": {
    "prefix": "vMixins",
    "body": [
      "mixins: [${1:name}]"
    ]
  },
  "v2 nextNick": {
    "prefix": "vNextNick",
    "body": [
      "this.\\$nextTick(() => {",
      "  $0",
      "})"
    ]
  },
  "v2 vRouterPush": {
    "prefix": "vrPush",
    "body": [
      "this.\\$router.push($0)"
    ]
  },
  "v2 vRouterReplace": {
    "prefix": "vrReplace",
    "body": [
      "this.\\$router.replace($0)"
    ]
  },
  "v2 vRouterGo": {
    "prefix": "vrGo",
    "body": [
      "this.\\$router.go($0)"
    ]
  },
  "v2 beforeCreate": {
    "prefix": "vBCreate",
    "body": [
      "beforeCreate () {",
      "  $0",
      "},"
    ]
  },
  "v2 created": {
    "prefix": "vCreated",
    "body": [
      "created () {",
      "  $0",
      "},"
    ]
  },
  "v2 beforeMount": {
    "prefix": "vBMount",
    "body": [
      "beforeMount () {",
      "  $0",
      "},"
    ]
  },
  "v2 mounted": {
    "prefix": "vMounted",
    "body": [
      "mounted () {",
      "  $0",
      "},"
    ]
  },
  "v2 beforeUpdate": {
    "prefix": "vBUpdate",
    "body": [
      "beforeUpdate () {",
      "  $0",
      "},"
    ]
  },
  "v2 updated": {
    "prefix": "vUpdated",
    "body": [
      "updated () {",
      "  $0",
      "},"
    ]
  },
  "v2 beforeUnmount": {
    "prefix": "vBUnmount",
    "body": [
      "beforeUnmount () {",
      "  $0",
      "},"
    ]
  },
  "v2 unmounted": {
    "prefix": "vUnmounted",
    "body": [
      "unmounted () {",
      "  $0",
      "},"
    ]
  },
  "v2 Commit ": {
    "prefix": "vCommit ",
    "body": [
      "this.\\$store.commit('${1:mutationName}', ${2:payload})"
    ]
  },
  "v2 dispatch ": {
    "prefix": "vDispatch ",
    "body": [
      "this.\\$store.dispatch('${1:actionName}', ${2:payload})"
    ]
  },
  "v3 定义一个函数 ": {
    "prefix": "vvFun",
    "body": [
      "const ${1:name} = () => {",
      "  $0",
      "}"
    ]
  },
  "v3 setup": {
    "prefix": "vvSetup",
    "body": [
      "setup(){",
      "  ",
      "},"
    ]
  },
  "v3 setup 带参数": {
    "prefix": "vvSetup-param",
    "body": [
      "setup(props, {attrs, slots, emit}){",
      "  $0",
      "},"
    ]
  },
  "v3 useRouter": {
    "prefix": "vvRouter",
    "body": [
      "const router = useRouter()"
    ]
  },
  "v3 router.push()": {
    "prefix": "vvrPush",
    "body": [
      "router.push($0)"
    ]
  },
  "v3 router.replace()": {
    "prefix": "vvrReplace",
    "body": [
      "router.replace($0)"
    ]
  },
  "v3 router.go()": {
    "prefix": "vvrGo",
    "body": [
      "router.go($0)"
    ]
  },
  "v3 useRoute": {
    "prefix": "vvRoute",
    "body": [
      "const route = useRoute()"
    ]
  },
  "v3 useStore": {
    "prefix": "vvStore",
    "body": [
      "const store = useStore()"
    ]
  },
  "v3 store.commit(\"\")": {
    "prefix": "vvCommit",
    "body": [
      "store.commit(\"${1:method}\",$0)"
    ]
  },
  "v3 store.dispatch(\"\")": {
    "prefix": "vvDispatch",
    "body": [
      "store.dispatch(\"${1:method}\",$0)"
    ]
  },
  "v3 ref": {
    "prefix": "vvRef",
    "body": [
      "const {${1:variable}} = ref(${2:variable})"
    ]
  },
  "v3 isRef": {
    "prefix": "vvIsRef",
    "body": [
      "isRef(${1:variable})"
    ]
  },
  "v3 unref": {
    "prefix": "vvUnref",
    "body": [
      "unref(${1:variable})"
    ]
  },
  "v3 isProxy": {
    "prefix": "vvIsProxy",
    "body": [
      "isProxy(${1:variable})"
    ]
  },
  "v3 isReactive": {
    "prefix": "vvIsReactive",
    "body": [
      "isReactive(${1:variable})"
    ]
  },
  "v3 readonly": {
    "prefix": "vvReadonly",
    "body": [
      "const read = readonly(${1:variable})"
    ]
  },
  "v3 isReadonly": {
    "prefix": "vvIsReadonly",
    "body": [
      "isReadonly(${1:variable})"
    ]
  },
  "v3 toRef": {
    "prefix": "vvToRef",
    "body": [
      "const {${1:variable}} = toRef(${2:variable})"
    ]
  },
  "v3 toRefs": {
    "prefix": "vvToRefs",
    "body": [
      "const {${1:variable}} = toRefs({${2:variable}})"
    ]
  },
  "v3 reactive": {
    "prefix": "vvReactive",
    "body": [
      "const ${1:variable} = reactive({",
      "  $0",
      "})"
    ]
  },
  "v3 mixins": {
    "prefix": "vvMixins",
    "body": [
      "mixins: [${1:name}]"
    ]
  },
  "v3 defineProps": {
    "prefix": "vvProps",
    "body": [
      "const props = defineProps({",
      "  ${1:name}: {",
      "    type: String,",
      "    required: true",
      "  }",
      "})"
    ]
  },
  "v3 defineEmits Array": {
    "prefix": "vvEmitsArr",
    "body": [
      "const emits = defineEmits(['$1'])"
    ]
  },
  "v3 defineEmits Object": {
    "prefix": "vvEmitsObj",
    "body": [
      "const emits = defineEmits({",
      "  $1",
      "})"
    ]
  },
  "v3 useSlots": {
    "prefix": "vvSlots",
    "body": [
      "const slots = useSlots()"
    ]
  },
  "v3 useAttrs": {
    "prefix": "vvAttrs",
    "body": [
      "const attrs = useAttrs()"
    ]
  },
  "v3 defineExpose": {
    "prefix": "vvExpose",
    "body": [
      "defineExpose({",
      "  $0",
      "})"
    ]
  },
  "v3 computed": {
    "prefix": "vvComputed",
    "body": [
      "const ${1:name} = computed(() => {",
      "  $0",
      "  return ",
      "})"
    ]
  },
  "v3 Watch": {
    "prefix": "vvWatch",
    "body": [
      "watch(${1:name}, (newValue, oldValue) => {",
      "  $0",
      "})"
    ]
  },
  "v3 [deep]": {
    "prefix": "vvWatchD",
    "body": [
      "watch(${1:name}, (newValue, oldValue) => {",
      "  $0",
      "},{ deep: true })"
    ]
  },
  "v3 [immediate]": {
    "prefix": "vvWatchI",
    "body": [
      "watch(${1:name}, (newValue, oldValue) => {",
      "  $0",
      "},{ immediate: true })"
    ]
  },
  "v3 [deep immediate]": {
    "prefix": "vvWatchDI",
    "body": [
      "watch(${1:name}, (newValue, oldValue) => {",
      "  $0",
      "},{ deep: true }, { immediate: true })"
    ]
  },
  "v3 [多个 ref]": {
    "prefix": "vvWatchArr",
    "body": [
      "watch([${1:name}], (newValue, oldValue) => {",
      "  $0",
      "})"
    ]
  },
  "v3 [reactive 中单个 key]": {
    "prefix": "vvWatchObj",
    "body": [
      "watch(() => ${1:key}, (newValue, oldValue) => {",
      "  $0",
      "})"
    ]
  },
  "v3 watchEffect": {
    "prefix": "vvWE",
    "body": [
      "watchEffect(() => {",
      "  $0",
      "})"
    ]
  },
  "v3 onBeforeMount": {
    "prefix": "vvBMounted",
    "body": [
      "onBeforeMount((${1:params}) => {",
      "  $0",
      "})"
    ]
  },
  "v3 onMounted": {
    "prefix": "vvMounted",
    "body": [
      "onMounted((${1:params}) => {",
      "  $0",
      "})"
    ]
  },
  "v3 onBeforeUpdate": {
    "prefix": "vvBUpdate",
    "body": [
      "onBeforeUpdate((${1:params}) => {",
      "  $0",
      "})"
    ]
  },
  "v3 onUpdated": {
    "prefix": "vvUpdated",
    "body": [
      "onUpdated((${1:params}) => {",
      "  $0",
      "})"
    ]
  },
  "v3 onBeforeUnmount": {
    "prefix": "vvBUnmount",
    "body": [
      "onBeforeUnmount((${1:params}) => {",
      "  $0",
      "})"
    ]
  },
  "v3 onUnmounted": {
    "prefix": "vvUnmounted",
    "body": [
      "onUnmounted((${1:params}) => {",
      "  $0",
      "})"
    ]
  },
  "v3 onBeforeRouteLeave": {
    "prefix": "vvUnmounted",
    "body": [
      "onBeforeRouteLeave((to, from) => {",
      "  $0",
      "})"
    ]
  },
  "v3 onBeforeRouteUpdate": {
    "prefix": "vvUnmounted",
    "body": [
      "onBeforeRouteUpdate((to, from) => {",
      "  $0",
      "})"
    ]
  },
  "v3 globalProperties": {
    "prefix": "vvGP",
    "body": [
      "app.config.globalProperties._bus = () => {}"
    ]
  },
  "v3 NextTick": {
    "prefix": "vvNextTick",
    "body": [
      "nextTick(()=>{",
      "  $0",
      "})"
    ]
  },
  "vueRouter beforeEach 全局前置守卫": {
    "prefix": "vrBEach",
    "body": [
      "router.beforeEach((to, from, next) => {",
      "  $1",
      "},"
    ]
  },
  "vueRouter beforeResolve 全局解析守卫": {
    "prefix": "vrBResolve",
    "body": [
      "router.beforeResolve((to, from, next) => {",
      "  $0",
      "},"
    ]
  },
  "vueRouter afterEach 全局后置钩子": {
    "prefix": "vrAEach",
    "body": [
      "router.afterEach((to, from) => {",
      "  $0",
      "},"
    ]
  },
  "vueRouter beforeEnter 路由独享的守卫": {
    "prefix": "vrBEach",
    "body": [
      "beforeEnter: (to, from, next) => {",
      "  $0",
      "},"
    ]
  },
  "vueRouter beforeRouteEnter  组件内的守卫 ( 进入 ) ": {
    "prefix": "vrBREnter",
    "body": [
      "beforeRouteEnter(to, from, next) {",
      "  $0",
      "},"
    ]
  },
  "vueRouter beforeRouteUpdate 组件内的守卫 ( 更新 )": {
    "prefix": "vrBRUpdate",
    "body": [
      "beforeRouteUpdate(to, from, next) {",
      "  $0",
      "},"
    ]
  },
  "vueRouter beforeRouteLeave 组件内的守卫 ( 离开 ) ": {
    "prefix": "vrBRLeave",
    "body": [
      "beforeRouteLeave(to, from, next) {",
      "  $0",
      "},"
    ]
  },
  "Pinia": {
    "prefix": "pinia",
    "body": [
      "import { defineStore } from \"pinia\";",
      "export const useStore = defineStore(\"${1:id}\", {",
      "  state: () => {",
      "    return {",
      "      $0",
      "    }",
      "  },",
      "  getters: {},",
      "  actions: {},",
      "})"
    ]
  },
  "Pinia storeToRefs": {
    "prefix": "pToRefs",
    "body": [
      "import { storeToRefs } from \"pinia\""
    ]
  },
  "Pinia $patch": {
    "prefix": "pPatch",
    "body": [
      "this.\\$patch(state => {",
      "  $1",
      "})"
    ]
  }
}